import {
  TmpVectors,
  Vector2,
  Vector3
} from "./chunk-GCXGXOND.js";
import {
  VertexBuffer
} from "./chunk-MX32RALM.js";
import {
  Tools
} from "./chunk-J3DITW5F.js";
import {
  PrecisionDate
} from "./chunk-ULQUZGBY.js";
import {
  Logger
} from "./chunk-RP2ILEGM.js";

// node_modules/@babylonjs/core/Events/pointerEvents.js
var PointerEventTypes = class {
};
PointerEventTypes.POINTERDOWN = 1;
PointerEventTypes.POINTERUP = 2;
PointerEventTypes.POINTERMOVE = 4;
PointerEventTypes.POINTERWHEEL = 8;
PointerEventTypes.POINTERPICK = 16;
PointerEventTypes.POINTERTAP = 32;
PointerEventTypes.POINTERDOUBLETAP = 64;
var PointerInfoBase = class {
  /**
   * Instantiates the base class of pointers info.
   * @param type Defines the type of event (PointerEventTypes)
   * @param event Defines the related dom event
   */
  constructor(type, event) {
    this.type = type;
    this.event = event;
  }
};
var PointerInfoPre = class extends PointerInfoBase {
  /**
   * Instantiates a PointerInfoPre to store pointer related info to the onPrePointerObservable event.
   * @param type Defines the type of event (PointerEventTypes)
   * @param event Defines the related dom event
   * @param localX Defines the local x coordinates of the pointer when the event occured
   * @param localY Defines the local y coordinates of the pointer when the event occured
   */
  constructor(type, event, localX, localY) {
    super(type, event);
    this.ray = null;
    this.originalPickingInfo = null;
    this.skipOnPointerObservable = false;
    this.localPosition = new Vector2(localX, localY);
  }
};
var PointerInfo = class extends PointerInfoBase {
  /**
   * Defines the picking info associated with this PointerInfo object (if applicable)
   */
  get pickInfo() {
    if (!this._pickInfo) {
      this._generatePickInfo();
    }
    return this._pickInfo;
  }
  /**
   * Instantiates a PointerInfo to store pointer related info to the onPointerObservable event.
   * @param type Defines the type of event (PointerEventTypes)
   * @param event Defines the related dom event
   * @param pickInfo Defines the picking info associated to the info (if any)
   * @param inputManager Defines the InputManager to use if there is no pickInfo
   */
  constructor(type, event, pickInfo, inputManager = null) {
    super(type, event);
    this._pickInfo = pickInfo;
    this._inputManager = inputManager;
  }
  /**
   * Generates the picking info if needed
   */
  /** @internal */
  _generatePickInfo() {
    if (this._inputManager) {
      this._pickInfo = this._inputManager._pickMove(this.event);
      this._inputManager._setRayOnPointerInfo(this._pickInfo, this.event);
      this._inputManager = null;
    }
  }
};

// node_modules/@babylonjs/core/Events/keyboardEvents.js
var KeyboardEventTypes = class {
};
KeyboardEventTypes.KEYDOWN = 1;
KeyboardEventTypes.KEYUP = 2;
var KeyboardInfo = class {
  /**
   * Instantiates a new keyboard info.
   * This class is used to store keyboard related info for the onKeyboardObservable event.
   * @param type Defines the type of event (KeyboardEventTypes)
   * @param event Defines the related dom event
   */
  constructor(type, event) {
    this.type = type;
    this.event = event;
  }
};
var KeyboardInfoPre = class extends KeyboardInfo {
  /**
   * Defines whether the engine should skip the next onKeyboardObservable associated to this pre.
   * @deprecated use skipOnKeyboardObservable property instead
   */
  get skipOnPointerObservable() {
    return this.skipOnKeyboardObservable;
  }
  set skipOnPointerObservable(value) {
    this.skipOnKeyboardObservable = value;
  }
  /**
   * Instantiates a new keyboard pre info.
   * This class is used to store keyboard related info for the onPreKeyboardObservable event.
   * @param type Defines the type of event (KeyboardEventTypes)
   * @param event Defines the related dom event
   */
  constructor(type, event) {
    super(type, event);
    this.type = type;
    this.event = event;
    this.skipOnKeyboardObservable = false;
  }
};

// node_modules/@babylonjs/core/Misc/perfCounter.js
var PerfCounter = class _PerfCounter {
  /**
   * Returns the smallest value ever
   */
  get min() {
    return this._min;
  }
  /**
   * Returns the biggest value ever
   */
  get max() {
    return this._max;
  }
  /**
   * Returns the average value since the performance counter is running
   */
  get average() {
    return this._average;
  }
  /**
   * Returns the average value of the last second the counter was monitored
   */
  get lastSecAverage() {
    return this._lastSecAverage;
  }
  /**
   * Returns the current value
   */
  get current() {
    return this._current;
  }
  /**
   * Gets the accumulated total
   */
  get total() {
    return this._totalAccumulated;
  }
  /**
   * Gets the total value count
   */
  get count() {
    return this._totalValueCount;
  }
  /**
   * Creates a new counter
   */
  constructor() {
    this._startMonitoringTime = 0;
    this._min = 0;
    this._max = 0;
    this._average = 0;
    this._lastSecAverage = 0;
    this._current = 0;
    this._totalValueCount = 0;
    this._totalAccumulated = 0;
    this._lastSecAccumulated = 0;
    this._lastSecTime = 0;
    this._lastSecValueCount = 0;
  }
  /**
   * Call this method to start monitoring a new frame.
   * This scenario is typically used when you accumulate monitoring time many times for a single frame, you call this method at the start of the frame, then beginMonitoring to start recording and endMonitoring(false) to accumulated the recorded time to the PerfCounter or addCount() to accumulate a monitored count.
   */
  fetchNewFrame() {
    this._totalValueCount++;
    this._current = 0;
    this._lastSecValueCount++;
  }
  /**
   * Call this method to monitor a count of something (e.g. mesh drawn in viewport count)
   * @param newCount the count value to add to the monitored count
   * @param fetchResult true when it's the last time in the frame you add to the counter and you wish to update the statistics properties (min/max/average), false if you only want to update statistics.
   */
  addCount(newCount, fetchResult) {
    if (!_PerfCounter.Enabled) {
      return;
    }
    this._current += newCount;
    if (fetchResult) {
      this._fetchResult();
    }
  }
  /**
   * Start monitoring this performance counter
   */
  beginMonitoring() {
    if (!_PerfCounter.Enabled) {
      return;
    }
    this._startMonitoringTime = PrecisionDate.Now;
  }
  /**
   * Compute the time lapsed since the previous beginMonitoring() call.
   * @param newFrame true by default to fetch the result and monitor a new frame, if false the time monitored will be added to the current frame counter
   */
  endMonitoring(newFrame = true) {
    if (!_PerfCounter.Enabled) {
      return;
    }
    if (newFrame) {
      this.fetchNewFrame();
    }
    const currentTime = PrecisionDate.Now;
    this._current = currentTime - this._startMonitoringTime;
    if (newFrame) {
      this._fetchResult();
    }
  }
  /**
   * Call this method to end the monitoring of a frame.
   * This scenario is typically used when you accumulate monitoring time many times for a single frame, you call this method at the end of the frame, after beginMonitoring to start recording and endMonitoring(false) to accumulated the recorded time to the PerfCounter or addCount() to accumulate a monitored count.
   */
  endFrame() {
    this._fetchResult();
  }
  /** @internal */
  _fetchResult() {
    this._totalAccumulated += this._current;
    this._lastSecAccumulated += this._current;
    this._min = Math.min(this._min, this._current);
    this._max = Math.max(this._max, this._current);
    this._average = this._totalAccumulated / this._totalValueCount;
    const now = PrecisionDate.Now;
    if (now - this._lastSecTime > 1e3) {
      this._lastSecAverage = this._lastSecAccumulated / this._lastSecValueCount;
      this._lastSecTime = now;
      this._lastSecAccumulated = 0;
      this._lastSecValueCount = 0;
    }
  }
};
PerfCounter.Enabled = true;

// node_modules/@babylonjs/core/Materials/uniformBuffer.js
var UniformBuffer = class _UniformBuffer {
  /**
   * Instantiates a new Uniform buffer objects.
   *
   * Handles blocks of uniform on the GPU.
   *
   * If WebGL 2 is not available, this class falls back on traditional setUniformXXX calls.
   *
   * For more information, please refer to :
   * @see https://www.khronos.org/opengl/wiki/Uniform_Buffer_Object
   * @param engine Define the engine the buffer is associated with
   * @param data Define the data contained in the buffer
   * @param dynamic Define if the buffer is updatable
   * @param name to assign to the buffer (debugging purpose)
   * @param forceNoUniformBuffer define that this object must not rely on UBO objects
   */
  constructor(engine, data, dynamic, name, forceNoUniformBuffer = false) {
    this._valueCache = {};
    this._engine = engine;
    this._noUBO = !engine.supportsUniformBuffers || forceNoUniformBuffer;
    this._dynamic = dynamic;
    this._name = name ?? "no-name";
    this._data = data || [];
    this._uniformLocations = {};
    this._uniformSizes = {};
    this._uniformArraySizes = {};
    this._uniformLocationPointer = 0;
    this._needSync = false;
    if (this._engine._features.trackUbosInFrame) {
      this._buffers = [];
      this._bufferIndex = -1;
      this._createBufferOnWrite = false;
      this._currentFrameId = 0;
    }
    if (this._noUBO) {
      this.updateMatrix3x3 = this._updateMatrix3x3ForEffect;
      this.updateMatrix2x2 = this._updateMatrix2x2ForEffect;
      this.updateFloat = this._updateFloatForEffect;
      this.updateFloat2 = this._updateFloat2ForEffect;
      this.updateFloat3 = this._updateFloat3ForEffect;
      this.updateFloat4 = this._updateFloat4ForEffect;
      this.updateFloatArray = this._updateFloatArrayForEffect;
      this.updateArray = this._updateArrayForEffect;
      this.updateIntArray = this._updateIntArrayForEffect;
      this.updateUIntArray = this._updateUIntArrayForEffect;
      this.updateMatrix = this._updateMatrixForEffect;
      this.updateMatrices = this._updateMatricesForEffect;
      this.updateVector3 = this._updateVector3ForEffect;
      this.updateVector4 = this._updateVector4ForEffect;
      this.updateColor3 = this._updateColor3ForEffect;
      this.updateColor4 = this._updateColor4ForEffect;
      this.updateDirectColor4 = this._updateDirectColor4ForEffect;
      this.updateInt = this._updateIntForEffect;
      this.updateInt2 = this._updateInt2ForEffect;
      this.updateInt3 = this._updateInt3ForEffect;
      this.updateInt4 = this._updateInt4ForEffect;
      this.updateUInt = this._updateUIntForEffect;
      this.updateUInt2 = this._updateUInt2ForEffect;
      this.updateUInt3 = this._updateUInt3ForEffect;
      this.updateUInt4 = this._updateUInt4ForEffect;
    } else {
      this._engine._uniformBuffers.push(this);
      this.updateMatrix3x3 = this._updateMatrix3x3ForUniform;
      this.updateMatrix2x2 = this._updateMatrix2x2ForUniform;
      this.updateFloat = this._updateFloatForUniform;
      this.updateFloat2 = this._updateFloat2ForUniform;
      this.updateFloat3 = this._updateFloat3ForUniform;
      this.updateFloat4 = this._updateFloat4ForUniform;
      this.updateFloatArray = this._updateFloatArrayForUniform;
      this.updateArray = this._updateArrayForUniform;
      this.updateIntArray = this._updateIntArrayForUniform;
      this.updateUIntArray = this._updateUIntArrayForUniform;
      this.updateMatrix = this._updateMatrixForUniform;
      this.updateMatrices = this._updateMatricesForUniform;
      this.updateVector3 = this._updateVector3ForUniform;
      this.updateVector4 = this._updateVector4ForUniform;
      this.updateColor3 = this._updateColor3ForUniform;
      this.updateColor4 = this._updateColor4ForUniform;
      this.updateDirectColor4 = this._updateDirectColor4ForUniform;
      this.updateInt = this._updateIntForUniform;
      this.updateInt2 = this._updateInt2ForUniform;
      this.updateInt3 = this._updateInt3ForUniform;
      this.updateInt4 = this._updateInt4ForUniform;
      this.updateUInt = this._updateUIntForUniform;
      this.updateUInt2 = this._updateUInt2ForUniform;
      this.updateUInt3 = this._updateUInt3ForUniform;
      this.updateUInt4 = this._updateUInt4ForUniform;
    }
  }
  /**
   * Indicates if the buffer is using the WebGL2 UBO implementation,
   * or just falling back on setUniformXXX calls.
   */
  get useUbo() {
    return !this._noUBO;
  }
  /**
   * Indicates if the WebGL underlying uniform buffer is in sync
   * with the javascript cache data.
   */
  get isSync() {
    return !this._needSync;
  }
  /**
   * Indicates if the WebGL underlying uniform buffer is dynamic.
   * Also, a dynamic UniformBuffer will disable cache verification and always
   * update the underlying WebGL uniform buffer to the GPU.
   * @returns if Dynamic, otherwise false
   */
  isDynamic() {
    return this._dynamic !== void 0;
  }
  /**
   * The data cache on JS side.
   * @returns the underlying data as a float array
   */
  getData() {
    return this._bufferData;
  }
  /**
   * The underlying WebGL Uniform buffer.
   * @returns the webgl buffer
   */
  getBuffer() {
    return this._buffer;
  }
  /**
   * std140 layout specifies how to align data within an UBO structure.
   * See https://khronos.org/registry/OpenGL/specs/gl/glspec45.core.pdf#page=159
   * for specs.
   * @param size
   */
  _fillAlignment(size) {
    let alignment;
    if (size <= 2) {
      alignment = size;
    } else {
      alignment = 4;
    }
    if (this._uniformLocationPointer % alignment !== 0) {
      const oldPointer = this._uniformLocationPointer;
      this._uniformLocationPointer += alignment - this._uniformLocationPointer % alignment;
      const diff = this._uniformLocationPointer - oldPointer;
      for (let i = 0; i < diff; i++) {
        this._data.push(0);
      }
    }
  }
  /**
   * Adds an uniform in the buffer.
   * Warning : the subsequents calls of this function must be in the same order as declared in the shader
   * for the layout to be correct ! The addUniform function only handles types like float, vec2, vec3, vec4, mat4,
   * meaning size=1,2,3,4 or 16. It does not handle struct types.
   * @param name Name of the uniform, as used in the uniform block in the shader.
   * @param size Data size, or data directly.
   * @param arraySize The number of elements in the array, 0 if not an array.
   */
  addUniform(name, size, arraySize = 0) {
    if (this._noUBO) {
      return;
    }
    if (this._uniformLocations[name] !== void 0) {
      return;
    }
    let data;
    if (arraySize > 0) {
      if (size instanceof Array) {
        throw "addUniform should not be use with Array in UBO: " + name;
      }
      this._fillAlignment(4);
      this._uniformArraySizes[name] = { strideSize: size, arraySize };
      if (size == 16) {
        size = size * arraySize;
      } else {
        const perElementPadding = 4 - size;
        const totalPadding = perElementPadding * arraySize;
        size = size * arraySize + totalPadding;
      }
      data = [];
      for (let i = 0; i < size; i++) {
        data.push(0);
      }
    } else {
      if (size instanceof Array) {
        data = size;
        size = data.length;
      } else {
        size = size;
        data = [];
        for (let i = 0; i < size; i++) {
          data.push(0);
        }
      }
      this._fillAlignment(size);
    }
    this._uniformSizes[name] = size;
    this._uniformLocations[name] = this._uniformLocationPointer;
    this._uniformLocationPointer += size;
    for (let i = 0; i < size; i++) {
      this._data.push(data[i]);
    }
    this._needSync = true;
  }
  /**
   * Adds a Matrix 4x4 to the uniform buffer.
   * @param name Name of the uniform, as used in the uniform block in the shader.
   * @param mat A 4x4 matrix.
   */
  addMatrix(name, mat) {
    this.addUniform(name, Array.prototype.slice.call(mat.asArray()));
  }
  /**
   * Adds a vec2 to the uniform buffer.
   * @param name Name of the uniform, as used in the uniform block in the shader.
   * @param x Define the x component value of the vec2
   * @param y Define the y component value of the vec2
   */
  addFloat2(name, x, y) {
    const temp = [x, y];
    this.addUniform(name, temp);
  }
  /**
   * Adds a vec3 to the uniform buffer.
   * @param name Name of the uniform, as used in the uniform block in the shader.
   * @param x Define the x component value of the vec3
   * @param y Define the y component value of the vec3
   * @param z Define the z component value of the vec3
   */
  addFloat3(name, x, y, z) {
    const temp = [x, y, z];
    this.addUniform(name, temp);
  }
  /**
   * Adds a vec3 to the uniform buffer.
   * @param name Name of the uniform, as used in the uniform block in the shader.
   * @param color Define the vec3 from a Color
   */
  addColor3(name, color) {
    const temp = [color.r, color.g, color.b];
    this.addUniform(name, temp);
  }
  /**
   * Adds a vec4 to the uniform buffer.
   * @param name Name of the uniform, as used in the uniform block in the shader.
   * @param color Define the rgb components from a Color
   * @param alpha Define the a component of the vec4
   */
  addColor4(name, color, alpha) {
    const temp = [color.r, color.g, color.b, alpha];
    this.addUniform(name, temp);
  }
  /**
   * Adds a vec3 to the uniform buffer.
   * @param name Name of the uniform, as used in the uniform block in the shader.
   * @param vector Define the vec3 components from a Vector
   */
  addVector3(name, vector) {
    const temp = [vector.x, vector.y, vector.z];
    this.addUniform(name, temp);
  }
  /**
   * Adds a Matrix 3x3 to the uniform buffer.
   * @param name Name of the uniform, as used in the uniform block in the shader.
   */
  addMatrix3x3(name) {
    this.addUniform(name, 12);
  }
  /**
   * Adds a Matrix 2x2 to the uniform buffer.
   * @param name Name of the uniform, as used in the uniform block in the shader.
   */
  addMatrix2x2(name) {
    this.addUniform(name, 8);
  }
  /**
   * Effectively creates the WebGL Uniform Buffer, once layout is completed with `addUniform`.
   */
  create() {
    if (this._noUBO) {
      return;
    }
    if (this._buffer) {
      return;
    }
    this._fillAlignment(4);
    this._bufferData = new Float32Array(this._data);
    this._rebuild();
    this._needSync = true;
  }
  // The result of this method is used for debugging purpose, as part of the buffer name
  // It is meant to more easily know what this buffer is about when debugging
  // Some buffers can have a lot of uniforms (several dozens), so the method only returns the first 10 of them
  // (should be enough to understand what the buffer is for)
  _getNames() {
    const names = [];
    let i = 0;
    for (const name in this._uniformLocations) {
      names.push(name);
      if (++i === 10) {
        break;
      }
    }
    return names.join(",");
  }
  /** @internal */
  _rebuild() {
    if (this._noUBO || !this._bufferData) {
      return;
    }
    if (this._dynamic) {
      this._buffer = this._engine.createDynamicUniformBuffer(this._bufferData, this._name + "_UniformList:" + this._getNames());
    } else {
      this._buffer = this._engine.createUniformBuffer(this._bufferData, this._name + "_UniformList:" + this._getNames());
    }
    if (this._engine._features.trackUbosInFrame) {
      this._buffers.push([this._buffer, this._engine._features.checkUbosContentBeforeUpload ? this._bufferData.slice() : void 0]);
      this._bufferIndex = this._buffers.length - 1;
      this._createBufferOnWrite = false;
    }
  }
  /** @internal */
  _rebuildAfterContextLost() {
    if (this._engine._features.trackUbosInFrame) {
      this._buffers = [];
      this._currentFrameId = 0;
    }
    this._rebuild();
  }
  /** @internal */
  get _numBuffers() {
    return this._buffers.length;
  }
  /** @internal */
  get _indexBuffer() {
    return this._bufferIndex;
  }
  /** Gets the name of this buffer */
  get name() {
    return this._name;
  }
  /** Gets the current effect */
  get currentEffect() {
    return this._currentEffect;
  }
  _buffersEqual(buf1, buf2) {
    for (let i = 0; i < buf1.length; ++i) {
      if (buf1[i] !== buf2[i]) {
        return false;
      }
    }
    return true;
  }
  _copyBuffer(src, dst) {
    for (let i = 0; i < src.length; ++i) {
      dst[i] = src[i];
    }
  }
  /**
   * Updates the WebGL Uniform Buffer on the GPU.
   * If the `dynamic` flag is set to true, no cache comparison is done.
   * Otherwise, the buffer will be updated only if the cache differs.
   */
  update() {
    if (this._noUBO) {
      return;
    }
    this.bindUniformBuffer();
    if (!this._buffer) {
      this.create();
      return;
    }
    if (!this._dynamic && !this._needSync) {
      this._createBufferOnWrite = this._engine._features.trackUbosInFrame;
      return;
    }
    if (this._buffers && this._buffers.length > 1 && this._buffers[this._bufferIndex][1]) {
      if (this._buffersEqual(this._bufferData, this._buffers[this._bufferIndex][1])) {
        this._needSync = false;
        this._createBufferOnWrite = this._engine._features.trackUbosInFrame;
        return;
      } else {
        this._copyBuffer(this._bufferData, this._buffers[this._bufferIndex][1]);
      }
    }
    this._engine.updateUniformBuffer(this._buffer, this._bufferData);
    if (this._engine._features._collectUbosUpdatedInFrame) {
      if (!_UniformBuffer._UpdatedUbosInFrame[this._name]) {
        _UniformBuffer._UpdatedUbosInFrame[this._name] = 0;
      }
      _UniformBuffer._UpdatedUbosInFrame[this._name]++;
    }
    this._needSync = false;
    this._createBufferOnWrite = this._engine._features.trackUbosInFrame;
  }
  _createNewBuffer() {
    if (this._bufferIndex + 1 < this._buffers.length) {
      this._bufferIndex++;
      this._buffer = this._buffers[this._bufferIndex][0];
      this._createBufferOnWrite = false;
      this._needSync = true;
    } else {
      this._rebuild();
    }
  }
  _checkNewFrame() {
    if (this._engine._features.trackUbosInFrame && this._currentFrameId !== this._engine.frameId) {
      this._currentFrameId = this._engine.frameId;
      this._createBufferOnWrite = false;
      if (this._buffers && this._buffers.length > 0) {
        this._needSync = this._bufferIndex !== 0;
        this._bufferIndex = 0;
        this._buffer = this._buffers[this._bufferIndex][0];
      } else {
        this._bufferIndex = -1;
      }
    }
  }
  /**
   * Updates the value of an uniform. The `update` method must be called afterwards to make it effective in the GPU.
   * @param uniformName Define the name of the uniform, as used in the uniform block in the shader.
   * @param data Define the flattened data
   * @param size Define the size of the data.
   */
  updateUniform(uniformName, data, size) {
    this._checkNewFrame();
    let location = this._uniformLocations[uniformName];
    if (location === void 0) {
      if (this._buffer) {
        Logger.Error("Cannot add an uniform after UBO has been created. uniformName=" + uniformName);
        return;
      }
      this.addUniform(uniformName, size);
      location = this._uniformLocations[uniformName];
    }
    if (!this._buffer) {
      this.create();
    }
    if (!this._dynamic) {
      let changed = false;
      for (let i = 0; i < size; i++) {
        if (size === 16 && !this._engine._features.uniformBufferHardCheckMatrix || this._bufferData[location + i] !== Math.fround(data[i])) {
          changed = true;
          if (this._createBufferOnWrite) {
            this._createNewBuffer();
          }
          this._bufferData[location + i] = data[i];
        }
      }
      this._needSync = this._needSync || changed;
    } else {
      for (let i = 0; i < size; i++) {
        this._bufferData[location + i] = data[i];
      }
    }
  }
  /**
   * Updates the value of an uniform. The `update` method must be called afterwards to make it effective in the GPU.
   * @param uniformName Define the name of the uniform, as used in the uniform block in the shader.
   * @param data Define the flattened data
   * @param size Define the size of the data.
   */
  updateUniformArray(uniformName, data, size) {
    this._checkNewFrame();
    const location = this._uniformLocations[uniformName];
    if (location === void 0) {
      Logger.Error("Cannot add an uniform Array dynamically. Please, add it using addUniform and make sure that uniform buffers are supported by the current engine.");
      return;
    }
    if (!this._buffer) {
      this.create();
    }
    const arraySizes = this._uniformArraySizes[uniformName];
    if (!this._dynamic) {
      let changed = false;
      let countToFour = 0;
      let baseStride = 0;
      for (let i = 0; i < size; i++) {
        if (this._bufferData[location + baseStride * 4 + countToFour] !== Tools.FloatRound(data[i])) {
          changed = true;
          if (this._createBufferOnWrite) {
            this._createNewBuffer();
          }
          this._bufferData[location + baseStride * 4 + countToFour] = data[i];
        }
        countToFour++;
        if (countToFour === arraySizes.strideSize) {
          for (; countToFour < 4; countToFour++) {
            this._bufferData[location + baseStride * 4 + countToFour] = 0;
          }
          countToFour = 0;
          baseStride++;
        }
      }
      this._needSync = this._needSync || changed;
    } else {
      for (let i = 0; i < size; i++) {
        this._bufferData[location + i] = data[i];
      }
    }
  }
  _cacheMatrix(name, matrix) {
    this._checkNewFrame();
    const cache = this._valueCache[name];
    const flag = matrix.updateFlag;
    if (cache !== void 0 && cache === flag) {
      return false;
    }
    this._valueCache[name] = flag;
    return true;
  }
  // Update methods
  _updateMatrix3x3ForUniform(name, matrix) {
    for (let i = 0; i < 3; i++) {
      _UniformBuffer._TempBuffer[i * 4] = matrix[i * 3];
      _UniformBuffer._TempBuffer[i * 4 + 1] = matrix[i * 3 + 1];
      _UniformBuffer._TempBuffer[i * 4 + 2] = matrix[i * 3 + 2];
      _UniformBuffer._TempBuffer[i * 4 + 3] = 0;
    }
    this.updateUniform(name, _UniformBuffer._TempBuffer, 12);
  }
  _updateMatrix3x3ForEffect(name, matrix) {
    this._currentEffect.setMatrix3x3(name, matrix);
  }
  _updateMatrix2x2ForEffect(name, matrix) {
    this._currentEffect.setMatrix2x2(name, matrix);
  }
  _updateMatrix2x2ForUniform(name, matrix) {
    for (let i = 0; i < 2; i++) {
      _UniformBuffer._TempBuffer[i * 4] = matrix[i * 2];
      _UniformBuffer._TempBuffer[i * 4 + 1] = matrix[i * 2 + 1];
      _UniformBuffer._TempBuffer[i * 4 + 2] = 0;
      _UniformBuffer._TempBuffer[i * 4 + 3] = 0;
    }
    this.updateUniform(name, _UniformBuffer._TempBuffer, 8);
  }
  _updateFloatForEffect(name, x) {
    this._currentEffect.setFloat(name, x);
  }
  _updateFloatForUniform(name, x) {
    _UniformBuffer._TempBuffer[0] = x;
    this.updateUniform(name, _UniformBuffer._TempBuffer, 1);
  }
  _updateFloat2ForEffect(name, x, y, suffix = "") {
    this._currentEffect.setFloat2(name + suffix, x, y);
  }
  _updateFloat2ForUniform(name, x, y) {
    _UniformBuffer._TempBuffer[0] = x;
    _UniformBuffer._TempBuffer[1] = y;
    this.updateUniform(name, _UniformBuffer._TempBuffer, 2);
  }
  _updateFloat3ForEffect(name, x, y, z, suffix = "") {
    this._currentEffect.setFloat3(name + suffix, x, y, z);
  }
  _updateFloat3ForUniform(name, x, y, z) {
    _UniformBuffer._TempBuffer[0] = x;
    _UniformBuffer._TempBuffer[1] = y;
    _UniformBuffer._TempBuffer[2] = z;
    this.updateUniform(name, _UniformBuffer._TempBuffer, 3);
  }
  _updateFloat4ForEffect(name, x, y, z, w, suffix = "") {
    this._currentEffect.setFloat4(name + suffix, x, y, z, w);
  }
  _updateFloat4ForUniform(name, x, y, z, w) {
    _UniformBuffer._TempBuffer[0] = x;
    _UniformBuffer._TempBuffer[1] = y;
    _UniformBuffer._TempBuffer[2] = z;
    _UniformBuffer._TempBuffer[3] = w;
    this.updateUniform(name, _UniformBuffer._TempBuffer, 4);
  }
  _updateFloatArrayForEffect(name, array) {
    this._currentEffect.setFloatArray(name, array);
  }
  _updateFloatArrayForUniform(name, array) {
    this.updateUniformArray(name, array, array.length);
  }
  _updateArrayForEffect(name, array) {
    this._currentEffect.setArray(name, array);
  }
  _updateArrayForUniform(name, array) {
    this.updateUniformArray(name, array, array.length);
  }
  _updateIntArrayForEffect(name, array) {
    this._currentEffect.setIntArray(name, array);
  }
  _updateIntArrayForUniform(name, array) {
    _UniformBuffer._TempBufferInt32View.set(array);
    this.updateUniformArray(name, _UniformBuffer._TempBuffer, array.length);
  }
  _updateUIntArrayForEffect(name, array) {
    this._currentEffect.setUIntArray(name, array);
  }
  _updateUIntArrayForUniform(name, array) {
    _UniformBuffer._TempBufferUInt32View.set(array);
    this.updateUniformArray(name, _UniformBuffer._TempBuffer, array.length);
  }
  _updateMatrixForEffect(name, mat) {
    this._currentEffect.setMatrix(name, mat);
  }
  _updateMatrixForUniform(name, mat) {
    if (this._cacheMatrix(name, mat)) {
      this.updateUniform(name, mat.asArray(), 16);
    }
  }
  _updateMatricesForEffect(name, mat) {
    this._currentEffect.setMatrices(name, mat);
  }
  _updateMatricesForUniform(name, mat) {
    this.updateUniform(name, mat, mat.length);
  }
  _updateVector3ForEffect(name, vector) {
    this._currentEffect.setVector3(name, vector);
  }
  _updateVector3ForUniform(name, vector) {
    _UniformBuffer._TempBuffer[0] = vector.x;
    _UniformBuffer._TempBuffer[1] = vector.y;
    _UniformBuffer._TempBuffer[2] = vector.z;
    this.updateUniform(name, _UniformBuffer._TempBuffer, 3);
  }
  _updateVector4ForEffect(name, vector) {
    this._currentEffect.setVector4(name, vector);
  }
  _updateVector4ForUniform(name, vector) {
    _UniformBuffer._TempBuffer[0] = vector.x;
    _UniformBuffer._TempBuffer[1] = vector.y;
    _UniformBuffer._TempBuffer[2] = vector.z;
    _UniformBuffer._TempBuffer[3] = vector.w;
    this.updateUniform(name, _UniformBuffer._TempBuffer, 4);
  }
  _updateColor3ForEffect(name, color, suffix = "") {
    this._currentEffect.setColor3(name + suffix, color);
  }
  _updateColor3ForUniform(name, color) {
    _UniformBuffer._TempBuffer[0] = color.r;
    _UniformBuffer._TempBuffer[1] = color.g;
    _UniformBuffer._TempBuffer[2] = color.b;
    this.updateUniform(name, _UniformBuffer._TempBuffer, 3);
  }
  _updateColor4ForEffect(name, color, alpha, suffix = "") {
    this._currentEffect.setColor4(name + suffix, color, alpha);
  }
  _updateDirectColor4ForEffect(name, color, suffix = "") {
    this._currentEffect.setDirectColor4(name + suffix, color);
  }
  _updateColor4ForUniform(name, color, alpha) {
    _UniformBuffer._TempBuffer[0] = color.r;
    _UniformBuffer._TempBuffer[1] = color.g;
    _UniformBuffer._TempBuffer[2] = color.b;
    _UniformBuffer._TempBuffer[3] = alpha;
    this.updateUniform(name, _UniformBuffer._TempBuffer, 4);
  }
  _updateDirectColor4ForUniform(name, color) {
    _UniformBuffer._TempBuffer[0] = color.r;
    _UniformBuffer._TempBuffer[1] = color.g;
    _UniformBuffer._TempBuffer[2] = color.b;
    _UniformBuffer._TempBuffer[3] = color.a;
    this.updateUniform(name, _UniformBuffer._TempBuffer, 4);
  }
  _updateIntForEffect(name, x, suffix = "") {
    this._currentEffect.setInt(name + suffix, x);
  }
  _updateIntForUniform(name, x) {
    _UniformBuffer._TempBufferInt32View[0] = x;
    this.updateUniform(name, _UniformBuffer._TempBuffer, 1);
  }
  _updateInt2ForEffect(name, x, y, suffix = "") {
    this._currentEffect.setInt2(name + suffix, x, y);
  }
  _updateInt2ForUniform(name, x, y) {
    _UniformBuffer._TempBufferInt32View[0] = x;
    _UniformBuffer._TempBufferInt32View[1] = y;
    this.updateUniform(name, _UniformBuffer._TempBuffer, 2);
  }
  _updateInt3ForEffect(name, x, y, z, suffix = "") {
    this._currentEffect.setInt3(name + suffix, x, y, z);
  }
  _updateInt3ForUniform(name, x, y, z) {
    _UniformBuffer._TempBufferInt32View[0] = x;
    _UniformBuffer._TempBufferInt32View[1] = y;
    _UniformBuffer._TempBufferInt32View[2] = z;
    this.updateUniform(name, _UniformBuffer._TempBuffer, 3);
  }
  _updateInt4ForEffect(name, x, y, z, w, suffix = "") {
    this._currentEffect.setInt4(name + suffix, x, y, z, w);
  }
  _updateInt4ForUniform(name, x, y, z, w) {
    _UniformBuffer._TempBufferInt32View[0] = x;
    _UniformBuffer._TempBufferInt32View[1] = y;
    _UniformBuffer._TempBufferInt32View[2] = z;
    _UniformBuffer._TempBufferInt32View[3] = w;
    this.updateUniform(name, _UniformBuffer._TempBuffer, 4);
  }
  _updateUIntForEffect(name, x, suffix = "") {
    this._currentEffect.setUInt(name + suffix, x);
  }
  _updateUIntForUniform(name, x) {
    _UniformBuffer._TempBufferUInt32View[0] = x;
    this.updateUniform(name, _UniformBuffer._TempBuffer, 1);
  }
  _updateUInt2ForEffect(name, x, y, suffix = "") {
    this._currentEffect.setUInt2(name + suffix, x, y);
  }
  _updateUInt2ForUniform(name, x, y) {
    _UniformBuffer._TempBufferUInt32View[0] = x;
    _UniformBuffer._TempBufferUInt32View[1] = y;
    this.updateUniform(name, _UniformBuffer._TempBuffer, 2);
  }
  _updateUInt3ForEffect(name, x, y, z, suffix = "") {
    this._currentEffect.setUInt3(name + suffix, x, y, z);
  }
  _updateUInt3ForUniform(name, x, y, z) {
    _UniformBuffer._TempBufferUInt32View[0] = x;
    _UniformBuffer._TempBufferUInt32View[1] = y;
    _UniformBuffer._TempBufferUInt32View[2] = z;
    this.updateUniform(name, _UniformBuffer._TempBuffer, 3);
  }
  _updateUInt4ForEffect(name, x, y, z, w, suffix = "") {
    this._currentEffect.setUInt4(name + suffix, x, y, z, w);
  }
  _updateUInt4ForUniform(name, x, y, z, w) {
    _UniformBuffer._TempBufferUInt32View[0] = x;
    _UniformBuffer._TempBufferUInt32View[1] = y;
    _UniformBuffer._TempBufferUInt32View[2] = z;
    _UniformBuffer._TempBufferUInt32View[3] = w;
    this.updateUniform(name, _UniformBuffer._TempBuffer, 4);
  }
  /**
   * Sets a sampler uniform on the effect.
   * @param name Define the name of the sampler.
   * @param texture Define the texture to set in the sampler
   */
  setTexture(name, texture) {
    this._currentEffect.setTexture(name, texture);
  }
  /**
   * Sets an array of sampler uniforms on the effect.
   * @param name Define the name of uniform.
   * @param textures Define the textures to set in the array of samplers
   */
  setTextureArray(name, textures) {
    this._currentEffect.setTextureArray(name, textures);
  }
  /**
   * Sets a sampler uniform on the effect.
   * @param name Define the name of the sampler.
   * @param texture Define the (internal) texture to set in the sampler
   */
  bindTexture(name, texture) {
    this._currentEffect._bindTexture(name, texture);
  }
  /**
   * Directly updates the value of the uniform in the cache AND on the GPU.
   * @param uniformName Define the name of the uniform, as used in the uniform block in the shader.
   * @param data Define the flattened data
   */
  updateUniformDirectly(uniformName, data) {
    this.updateUniform(uniformName, data, data.length);
    this.update();
  }
  /**
   * Associates an effect to this uniform buffer
   * @param effect Define the effect to associate the buffer to
   * @param name Name of the uniform block in the shader.
   */
  bindToEffect(effect, name) {
    this._currentEffect = effect;
    this._currentEffectName = name;
  }
  /**
   * Binds the current (GPU) buffer to the effect
   */
  bindUniformBuffer() {
    if (!this._noUBO && this._buffer && this._currentEffect) {
      this._currentEffect.bindUniformBuffer(this._buffer, this._currentEffectName);
    }
  }
  /**
   * Dissociates the current effect from this uniform buffer
   */
  unbindEffect() {
    this._currentEffect = void 0;
    this._currentEffectName = void 0;
  }
  /**
   * Sets the current state of the class (_bufferIndex, _buffer) to point to the data buffer passed in parameter if this buffer is one of the buffers handled by the class (meaning if it can be found in the _buffers array)
   * This method is meant to be able to update a buffer at any time: just call setDataBuffer to set the class in the right state, call some updateXXX methods and then call udpate() => that will update the GPU buffer on the graphic card
   * @param dataBuffer buffer to look for
   * @returns true if the buffer has been found and the class internal state points to it, else false
   */
  setDataBuffer(dataBuffer) {
    if (!this._buffers) {
      return this._buffer === dataBuffer;
    }
    for (let b = 0; b < this._buffers.length; ++b) {
      const buffer = this._buffers[b];
      if (buffer[0] === dataBuffer) {
        this._bufferIndex = b;
        this._buffer = dataBuffer;
        this._createBufferOnWrite = false;
        this._currentEffect = void 0;
        return true;
      }
    }
    return false;
  }
  /**
   * Disposes the uniform buffer.
   */
  dispose() {
    if (this._noUBO) {
      return;
    }
    const uniformBuffers = this._engine._uniformBuffers;
    const index = uniformBuffers.indexOf(this);
    if (index !== -1) {
      uniformBuffers[index] = uniformBuffers[uniformBuffers.length - 1];
      uniformBuffers.pop();
    }
    if (this._engine._features.trackUbosInFrame && this._buffers) {
      for (let i = 0; i < this._buffers.length; ++i) {
        const buffer = this._buffers[i][0];
        this._engine._releaseBuffer(buffer);
      }
    } else if (this._buffer && this._engine._releaseBuffer(this._buffer)) {
      this._buffer = null;
    }
  }
};
UniformBuffer._UpdatedUbosInFrame = {};
UniformBuffer._MAX_UNIFORM_SIZE = 256;
UniformBuffer._TempBuffer = new Float32Array(UniformBuffer._MAX_UNIFORM_SIZE);
UniformBuffer._TempBufferInt32View = new Int32Array(UniformBuffer._TempBuffer.buffer);
UniformBuffer._TempBufferUInt32View = new Uint32Array(UniformBuffer._TempBuffer.buffer);

// node_modules/@babylonjs/core/Collisions/pickingInfo.js
var PickingInfo = class {
  constructor() {
    this.hit = false;
    this.distance = 0;
    this.pickedPoint = null;
    this.pickedMesh = null;
    this.bu = 0;
    this.bv = 0;
    this.faceId = -1;
    this.subMeshFaceId = -1;
    this.subMeshId = 0;
    this.pickedSprite = null;
    this.thinInstanceIndex = -1;
    this.ray = null;
    this.originMesh = null;
    this.aimTransform = null;
    this.gripTransform = null;
  }
  /**
   * Gets the normal corresponding to the face the pick collided with
   * @param useWorldCoordinates If the resulting normal should be relative to the world (default: false)
   * @param useVerticesNormals If the vertices normals should be used to calculate the normal instead of the normal map (default: true)
   * @returns The normal corresponding to the face the pick collided with
   * @remarks Note that the returned normal will always point towards the picking ray.
   */
  getNormal(useWorldCoordinates = false, useVerticesNormals = true) {
    if (!this.pickedMesh || useVerticesNormals && !this.pickedMesh.isVerticesDataPresent(VertexBuffer.NormalKind)) {
      return null;
    }
    let indices = this.pickedMesh.getIndices();
    if ((indices == null ? void 0 : indices.length) === 0) {
      indices = null;
    }
    let result;
    const tmp0 = TmpVectors.Vector3[0];
    const tmp1 = TmpVectors.Vector3[1];
    const tmp2 = TmpVectors.Vector3[2];
    if (useVerticesNormals) {
      const normals = this.pickedMesh.getVerticesData(VertexBuffer.NormalKind);
      let normal0 = indices ? Vector3.FromArrayToRef(normals, indices[this.faceId * 3] * 3, tmp0) : tmp0.copyFromFloats(normals[this.faceId * 3 * 3], normals[this.faceId * 3 * 3 + 1], normals[this.faceId * 3 * 3 + 2]);
      let normal1 = indices ? Vector3.FromArrayToRef(normals, indices[this.faceId * 3 + 1] * 3, tmp1) : tmp1.copyFromFloats(normals[(this.faceId * 3 + 1) * 3], normals[(this.faceId * 3 + 1) * 3 + 1], normals[(this.faceId * 3 + 1) * 3 + 2]);
      let normal2 = indices ? Vector3.FromArrayToRef(normals, indices[this.faceId * 3 + 2] * 3, tmp2) : tmp2.copyFromFloats(normals[(this.faceId * 3 + 2) * 3], normals[(this.faceId * 3 + 2) * 3 + 1], normals[(this.faceId * 3 + 2) * 3 + 2]);
      normal0 = normal0.scale(this.bu);
      normal1 = normal1.scale(this.bv);
      normal2 = normal2.scale(1 - this.bu - this.bv);
      result = new Vector3(normal0.x + normal1.x + normal2.x, normal0.y + normal1.y + normal2.y, normal0.z + normal1.z + normal2.z);
    } else {
      const positions = this.pickedMesh.getVerticesData(VertexBuffer.PositionKind);
      const vertex1 = indices ? Vector3.FromArrayToRef(positions, indices[this.faceId * 3] * 3, tmp0) : tmp0.copyFromFloats(positions[this.faceId * 3 * 3], positions[this.faceId * 3 * 3 + 1], positions[this.faceId * 3 * 3 + 2]);
      const vertex2 = indices ? Vector3.FromArrayToRef(positions, indices[this.faceId * 3 + 1] * 3, tmp1) : tmp1.copyFromFloats(positions[(this.faceId * 3 + 1) * 3], positions[(this.faceId * 3 + 1) * 3 + 1], positions[(this.faceId * 3 + 1) * 3 + 2]);
      const vertex3 = indices ? Vector3.FromArrayToRef(positions, indices[this.faceId * 3 + 2] * 3, tmp2) : tmp2.copyFromFloats(positions[(this.faceId * 3 + 2) * 3], positions[(this.faceId * 3 + 2) * 3 + 1], positions[(this.faceId * 3 + 2) * 3 + 2]);
      const p1p2 = vertex1.subtract(vertex2);
      const p3p2 = vertex3.subtract(vertex2);
      result = Vector3.Cross(p1p2, p3p2);
    }
    const transformNormalToWorld = (pickedMesh, n) => {
      let wm = pickedMesh.getWorldMatrix();
      if (pickedMesh.nonUniformScaling) {
        TmpVectors.Matrix[0].copyFrom(wm);
        wm = TmpVectors.Matrix[0];
        wm.setTranslationFromFloats(0, 0, 0);
        wm.invert();
        wm.transposeToRef(TmpVectors.Matrix[1]);
        wm = TmpVectors.Matrix[1];
      }
      Vector3.TransformNormalToRef(n, wm, n);
    };
    if (useWorldCoordinates) {
      transformNormalToWorld(this.pickedMesh, result);
    }
    if (this.ray) {
      const normalForDirectionChecking = TmpVectors.Vector3[0].copyFrom(result);
      if (!useWorldCoordinates) {
        transformNormalToWorld(this.pickedMesh, normalForDirectionChecking);
      }
      if (Vector3.Dot(normalForDirectionChecking, this.ray.direction) > 0) {
        result.negateInPlace();
      }
    }
    result.normalize();
    return result;
  }
  /**
   * Gets the texture coordinates of where the pick occurred
   * @param uvSet The UV set to use to calculate the texture coordinates (default: VertexBuffer.UVKind)
   * @returns The vector containing the coordinates of the texture
   */
  getTextureCoordinates(uvSet = VertexBuffer.UVKind) {
    if (!this.pickedMesh || !this.pickedMesh.isVerticesDataPresent(uvSet)) {
      return null;
    }
    const indices = this.pickedMesh.getIndices();
    if (!indices) {
      return null;
    }
    const uvs = this.pickedMesh.getVerticesData(uvSet);
    if (!uvs) {
      return null;
    }
    let uv0 = Vector2.FromArray(uvs, indices[this.faceId * 3] * 2);
    let uv1 = Vector2.FromArray(uvs, indices[this.faceId * 3 + 1] * 2);
    let uv2 = Vector2.FromArray(uvs, indices[this.faceId * 3 + 2] * 2);
    uv0 = uv0.scale(this.bu);
    uv1 = uv1.scale(this.bv);
    uv2 = uv2.scale(1 - this.bu - this.bv);
    return new Vector2(uv0.x + uv1.x + uv2.x, uv0.y + uv1.y + uv2.y);
  }
};

// node_modules/@babylonjs/core/sceneComponent.js
var SceneComponentConstants = class {
};
SceneComponentConstants.NAME_EFFECTLAYER = "EffectLayer";
SceneComponentConstants.NAME_LAYER = "Layer";
SceneComponentConstants.NAME_LENSFLARESYSTEM = "LensFlareSystem";
SceneComponentConstants.NAME_BOUNDINGBOXRENDERER = "BoundingBoxRenderer";
SceneComponentConstants.NAME_PARTICLESYSTEM = "ParticleSystem";
SceneComponentConstants.NAME_GAMEPAD = "Gamepad";
SceneComponentConstants.NAME_SIMPLIFICATIONQUEUE = "SimplificationQueue";
SceneComponentConstants.NAME_GEOMETRYBUFFERRENDERER = "GeometryBufferRenderer";
SceneComponentConstants.NAME_PREPASSRENDERER = "PrePassRenderer";
SceneComponentConstants.NAME_DEPTHRENDERER = "DepthRenderer";
SceneComponentConstants.NAME_DEPTHPEELINGRENDERER = "DepthPeelingRenderer";
SceneComponentConstants.NAME_IBLSHADOWSRENDERER = "IblShadowsRenderer";
SceneComponentConstants.NAME_POSTPROCESSRENDERPIPELINEMANAGER = "PostProcessRenderPipelineManager";
SceneComponentConstants.NAME_SPRITE = "Sprite";
SceneComponentConstants.NAME_SUBSURFACE = "SubSurface";
SceneComponentConstants.NAME_OUTLINERENDERER = "Outline";
SceneComponentConstants.NAME_PROCEDURALTEXTURE = "ProceduralTexture";
SceneComponentConstants.NAME_SHADOWGENERATOR = "ShadowGenerator";
SceneComponentConstants.NAME_OCTREE = "Octree";
SceneComponentConstants.NAME_PHYSICSENGINE = "PhysicsEngine";
SceneComponentConstants.NAME_AUDIO = "Audio";
SceneComponentConstants.NAME_FLUIDRENDERER = "FluidRenderer";
SceneComponentConstants.STEP_ISREADYFORMESH_EFFECTLAYER = 0;
SceneComponentConstants.STEP_BEFOREEVALUATEACTIVEMESH_BOUNDINGBOXRENDERER = 0;
SceneComponentConstants.STEP_EVALUATESUBMESH_BOUNDINGBOXRENDERER = 0;
SceneComponentConstants.STEP_PREACTIVEMESH_BOUNDINGBOXRENDERER = 0;
SceneComponentConstants.STEP_CAMERADRAWRENDERTARGET_EFFECTLAYER = 1;
SceneComponentConstants.STEP_BEFORECAMERADRAW_PREPASS = 0;
SceneComponentConstants.STEP_BEFORECAMERADRAW_EFFECTLAYER = 1;
SceneComponentConstants.STEP_BEFORECAMERADRAW_LAYER = 2;
SceneComponentConstants.STEP_BEFORERENDERTARGETDRAW_PREPASS = 0;
SceneComponentConstants.STEP_BEFORERENDERTARGETDRAW_LAYER = 1;
SceneComponentConstants.STEP_BEFORERENDERINGMESH_PREPASS = 0;
SceneComponentConstants.STEP_BEFORERENDERINGMESH_OUTLINE = 1;
SceneComponentConstants.STEP_AFTERRENDERINGMESH_PREPASS = 0;
SceneComponentConstants.STEP_AFTERRENDERINGMESH_OUTLINE = 1;
SceneComponentConstants.STEP_AFTERRENDERINGGROUPDRAW_EFFECTLAYER_DRAW = 0;
SceneComponentConstants.STEP_AFTERRENDERINGGROUPDRAW_BOUNDINGBOXRENDERER = 1;
SceneComponentConstants.STEP_BEFORECAMERAUPDATE_SIMPLIFICATIONQUEUE = 0;
SceneComponentConstants.STEP_BEFORECAMERAUPDATE_GAMEPAD = 1;
SceneComponentConstants.STEP_BEFORECLEAR_PROCEDURALTEXTURE = 0;
SceneComponentConstants.STEP_BEFORECLEAR_PREPASS = 1;
SceneComponentConstants.STEP_BEFORERENDERTARGETCLEAR_PREPASS = 0;
SceneComponentConstants.STEP_AFTERRENDERTARGETDRAW_PREPASS = 0;
SceneComponentConstants.STEP_AFTERRENDERTARGETDRAW_LAYER = 1;
SceneComponentConstants.STEP_AFTERCAMERADRAW_PREPASS = 0;
SceneComponentConstants.STEP_AFTERCAMERADRAW_EFFECTLAYER = 1;
SceneComponentConstants.STEP_AFTERCAMERADRAW_LENSFLARESYSTEM = 2;
SceneComponentConstants.STEP_AFTERCAMERADRAW_EFFECTLAYER_DRAW = 3;
SceneComponentConstants.STEP_AFTERCAMERADRAW_LAYER = 4;
SceneComponentConstants.STEP_AFTERCAMERADRAW_FLUIDRENDERER = 5;
SceneComponentConstants.STEP_AFTERCAMERAPOSTPROCESS_LAYER = 0;
SceneComponentConstants.STEP_AFTERRENDERTARGETPOSTPROCESS_LAYER = 0;
SceneComponentConstants.STEP_AFTERRENDER_AUDIO = 0;
SceneComponentConstants.STEP_GATHERRENDERTARGETS_DEPTHRENDERER = 0;
SceneComponentConstants.STEP_GATHERRENDERTARGETS_GEOMETRYBUFFERRENDERER = 1;
SceneComponentConstants.STEP_GATHERRENDERTARGETS_SHADOWGENERATOR = 2;
SceneComponentConstants.STEP_GATHERRENDERTARGETS_POSTPROCESSRENDERPIPELINEMANAGER = 3;
SceneComponentConstants.STEP_GATHERACTIVECAMERARENDERTARGETS_DEPTHRENDERER = 0;
SceneComponentConstants.STEP_GATHERACTIVECAMERARENDERTARGETS_FLUIDRENDERER = 1;
SceneComponentConstants.STEP_POINTERMOVE_SPRITE = 0;
SceneComponentConstants.STEP_POINTERDOWN_SPRITE = 0;
SceneComponentConstants.STEP_POINTERUP_SPRITE = 0;
var Stage = class _Stage extends Array {
  /**
   * Hide ctor from the rest of the world.
   * @param items The items to add.
   */
  constructor(items) {
    super(...items);
  }
  /**
   * Creates a new Stage.
   * @returns A new instance of a Stage
   */
  static Create() {
    return Object.create(_Stage.prototype);
  }
  /**
   * Registers a step in an ordered way in the targeted stage.
   * @param index Defines the position to register the step in
   * @param component Defines the component attached to the step
   * @param action Defines the action to launch during the step
   */
  registerStep(index, component, action) {
    let i = 0;
    let maxIndex = Number.MAX_VALUE;
    for (; i < this.length; i++) {
      const step = this[i];
      maxIndex = step.index;
      if (index < maxIndex) {
        break;
      }
    }
    this.splice(i, 0, { index, component, action: action.bind(component) });
  }
  /**
   * Clears all the steps from the stage.
   */
  clear() {
    this.length = 0;
  }
};

// node_modules/@babylonjs/core/Lights/lightConstants.js
var LightConstants = class {
  /**
   * Sort function to order lights for rendering.
   * @param a First Light object to compare to second.
   * @param b Second Light object to compare first.
   * @returns -1 to reduce's a's index relative to be, 0 for no change, 1 to increase a's index relative to b.
   */
  static CompareLightsPriority(a, b) {
    if (a.shadowEnabled !== b.shadowEnabled) {
      return (b.shadowEnabled ? 1 : 0) - (a.shadowEnabled ? 1 : 0);
    }
    return b.renderPriority - a.renderPriority;
  }
};
LightConstants.FALLOFF_DEFAULT = 0;
LightConstants.FALLOFF_PHYSICAL = 1;
LightConstants.FALLOFF_GLTF = 2;
LightConstants.FALLOFF_STANDARD = 3;
LightConstants.LIGHTMAP_DEFAULT = 0;
LightConstants.LIGHTMAP_SPECULAR = 1;
LightConstants.LIGHTMAP_SHADOWSONLY = 2;
LightConstants.INTENSITYMODE_AUTOMATIC = 0;
LightConstants.INTENSITYMODE_LUMINOUSPOWER = 1;
LightConstants.INTENSITYMODE_LUMINOUSINTENSITY = 2;
LightConstants.INTENSITYMODE_ILLUMINANCE = 3;
LightConstants.INTENSITYMODE_LUMINANCE = 4;
LightConstants.LIGHTTYPEID_POINTLIGHT = 0;
LightConstants.LIGHTTYPEID_DIRECTIONALLIGHT = 1;
LightConstants.LIGHTTYPEID_SPOTLIGHT = 2;
LightConstants.LIGHTTYPEID_HEMISPHERICLIGHT = 3;

export {
  PointerEventTypes,
  PointerInfoPre,
  PointerInfo,
  UniformBuffer,
  PickingInfo,
  SceneComponentConstants,
  Stage,
  KeyboardEventTypes,
  KeyboardInfo,
  KeyboardInfoPre,
  PerfCounter,
  LightConstants
};
//# sourceMappingURL=chunk-LFQOBB3N.js.map
